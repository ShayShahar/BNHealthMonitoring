// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HealthMonitoringMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HealthMonitoringMessages {

namespace {

const ::google::protobuf::Descriptor* pLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* pComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDMMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDMMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataUpdateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataUpdateMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_HealthMonitoringMessages_2eproto() {
  protobuf_AddDesc_HealthMonitoringMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HealthMonitoringMessages.proto");
  GOOGLE_CHECK(file != NULL);
  pLink_descriptor_ = file->message_type(0);
  static const int pLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pLink, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pLink, probability_),
  };
  pLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pLink_descriptor_,
      pLink::default_instance_,
      pLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pLink));
  pComponent_descriptor_ = file->message_type(1);
  static const int pComponent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pComponent, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pComponent, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pComponent, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pComponent, weight_),
  };
  pComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pComponent_descriptor_,
      pComponent::default_instance_,
      pComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pComponent));
  CDMMessage_descriptor_ = file->message_type(2);
  static const int CDMMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDMMessage, cdm_root_),
  };
  CDMMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDMMessage_descriptor_,
      CDMMessage::default_instance_,
      CDMMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDMMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDMMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDMMessage));
  OutputMessage_descriptor_ = file->message_type(3);
  static const int OutputMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputMessage, component_),
  };
  OutputMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputMessage_descriptor_,
      OutputMessage::default_instance_,
      OutputMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputMessage));
  LocationMessage_descriptor_ = file->message_type(4);
  static const int LocationMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, delta_),
  };
  LocationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationMessage_descriptor_,
      LocationMessage::default_instance_,
      LocationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationMessage));
  DataUpdateMsg_descriptor_ = file->message_type(5);
  static const int DataUpdateMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUpdateMsg, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUpdateMsg, components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUpdateMsg, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUpdateMsg, result_),
  };
  DataUpdateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataUpdateMsg_descriptor_,
      DataUpdateMsg::default_instance_,
      DataUpdateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUpdateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUpdateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataUpdateMsg));
  OpCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HealthMonitoringMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pLink_descriptor_, &pLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pComponent_descriptor_, &pComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDMMessage_descriptor_, &CDMMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputMessage_descriptor_, &OutputMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationMessage_descriptor_, &LocationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataUpdateMsg_descriptor_, &DataUpdateMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HealthMonitoringMessages_2eproto() {
  delete pLink::default_instance_;
  delete pLink_reflection_;
  delete pComponent::default_instance_;
  delete pComponent_reflection_;
  delete CDMMessage::default_instance_;
  delete CDMMessage_reflection_;
  delete OutputMessage::default_instance_;
  delete OutputMessage_reflection_;
  delete LocationMessage::default_instance_;
  delete LocationMessage_reflection_;
  delete DataUpdateMsg::default_instance_;
  delete DataUpdateMsg_reflection_;
}

void protobuf_AddDesc_HealthMonitoringMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036HealthMonitoringMessages.proto\022\030Health"
    "MonitoringMessages\"T\n\005pLink\0226\n\010children\030"
    "\001 \001(\0132$.HealthMonitoringMessages.pCompon"
    "ent\022\023\n\013probability\030\002 \001(\001\"i\n\npComponent\022."
    "\n\005links\030\001 \003(\0132\037.HealthMonitoringMessages"
    ".pLink\022\014\n\004name\030\002 \002(\t\022\r\n\005state\030\003 \001(\t\022\016\n\006w"
    "eight\030\004 \001(\001\"D\n\nCDMMessage\0226\n\010cdm_root\030\001 "
    "\002(\0132$.HealthMonitoringMessages.pComponen"
    "t\"H\n\rOutputMessage\0227\n\tcomponent\030\001 \002(\0132$."
    "HealthMonitoringMessages.pComponent\"R\n\017L"
    "ocationMessage\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001"
    "z\030\003 \002(\001\022\017\n\007seconds\030\004 \002(\005\022\r\n\005delta\030\005 \002(\001\""
    "\361\001\n\rDataUpdateMsg\0220\n\006opcode\030\001 \002(\0162 .Heal"
    "thMonitoringMessages.OpCode\0228\n\ncomponent"
    "s\030\002 \001(\0132$.HealthMonitoringMessages.CDMMe"
    "ssage\022;\n\010location\030\003 \001(\0132).HealthMonitori"
    "ngMessages.LocationMessage\0227\n\006result\030\004 \001"
    "(\0132\'.HealthMonitoringMessages.OutputMess"
    "age*>\n\006OpCode\022\016\n\nComponents\020\000\022\017\n\013SatLoca"
    "tion\020\001\022\n\n\006Result\020\002\022\007\n\003LRU\020\003", 787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HealthMonitoringMessages.proto", &protobuf_RegisterTypes);
  pLink::default_instance_ = new pLink();
  pComponent::default_instance_ = new pComponent();
  CDMMessage::default_instance_ = new CDMMessage();
  OutputMessage::default_instance_ = new OutputMessage();
  LocationMessage::default_instance_ = new LocationMessage();
  DataUpdateMsg::default_instance_ = new DataUpdateMsg();
  pLink::default_instance_->InitAsDefaultInstance();
  pComponent::default_instance_->InitAsDefaultInstance();
  CDMMessage::default_instance_->InitAsDefaultInstance();
  OutputMessage::default_instance_->InitAsDefaultInstance();
  LocationMessage::default_instance_->InitAsDefaultInstance();
  DataUpdateMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HealthMonitoringMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HealthMonitoringMessages_2eproto {
  StaticDescriptorInitializer_HealthMonitoringMessages_2eproto() {
    protobuf_AddDesc_HealthMonitoringMessages_2eproto();
  }
} static_descriptor_initializer_HealthMonitoringMessages_2eproto_;

const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCode_descriptor_;
}
bool OpCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pLink::kChildrenFieldNumber;
const int pLink::kProbabilityFieldNumber;
#endif  // !_MSC_VER

pLink::pLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pLink::InitAsDefaultInstance() {
  children_ = const_cast< ::HealthMonitoringMessages::pComponent*>(&::HealthMonitoringMessages::pComponent::default_instance());
}

pLink::pLink(const pLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pLink::SharedCtor() {
  _cached_size_ = 0;
  children_ = NULL;
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pLink::~pLink() {
  SharedDtor();
}

void pLink::SharedDtor() {
  if (this != default_instance_) {
    delete children_;
  }
}

void pLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pLink_descriptor_;
}

const pLink& pLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HealthMonitoringMessages_2eproto();  return *default_instance_;
}

pLink* pLink::default_instance_ = NULL;

pLink* pLink::New() const {
  return new pLink;
}

void pLink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_children()) {
      if (children_ != NULL) children_->::HealthMonitoringMessages::pComponent::Clear();
    }
    probability_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .HealthMonitoringMessages.pComponent children = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_probability;
        break;
      }
      
      // optional double probability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .HealthMonitoringMessages.pComponent children = 1;
  if (has_children()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children(), output);
  }
  
  // optional double probability = 2;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->probability(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .HealthMonitoringMessages.pComponent children = 1;
  if (has_children()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->children(), target);
  }
  
  // optional double probability = 2;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->probability(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pLink::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .HealthMonitoringMessages.pComponent children = 1;
    if (has_children()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children());
    }
    
    // optional double probability = 2;
    if (has_probability()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pLink::MergeFrom(const pLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_children()) {
      mutable_children()->::HealthMonitoringMessages::pComponent::MergeFrom(from.children());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pLink::CopyFrom(const pLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pLink::IsInitialized() const {
  
  if (has_children()) {
    if (!this->children().IsInitialized()) return false;
  }
  return true;
}

void pLink::Swap(pLink* other) {
  if (other != this) {
    std::swap(children_, other->children_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pLink_descriptor_;
  metadata.reflection = pLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pComponent::kLinksFieldNumber;
const int pComponent::kNameFieldNumber;
const int pComponent::kStateFieldNumber;
const int pComponent::kWeightFieldNumber;
#endif  // !_MSC_VER

pComponent::pComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pComponent::InitAsDefaultInstance() {
}

pComponent::pComponent(const pComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pComponent::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pComponent::~pComponent() {
  SharedDtor();
}

void pComponent::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void pComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pComponent_descriptor_;
}

const pComponent& pComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HealthMonitoringMessages_2eproto();  return *default_instance_;
}

pComponent* pComponent::default_instance_ = NULL;

pComponent* pComponent::New() const {
  return new pComponent;
}

void pComponent::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    weight_ = 0;
  }
  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HealthMonitoringMessages.pLink links = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_links;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }
      
      // optional string state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_weight;
        break;
      }
      
      // optional double weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HealthMonitoringMessages.pLink links = 1;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->links(i), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->state(), output);
  }
  
  // optional double weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HealthMonitoringMessages.pLink links = 1;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->links(i), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }
  
  // optional double weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }
    
    // optional double weight = 4;
    if (has_weight()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .HealthMonitoringMessages.pLink links = 1;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pComponent::MergeFrom(const pComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pComponent::CopyFrom(const pComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pComponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < links_size(); i++) {
    if (!this->links(i).IsInitialized()) return false;
  }
  return true;
}

void pComponent::Swap(pComponent* other) {
  if (other != this) {
    links_.Swap(&other->links_);
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pComponent_descriptor_;
  metadata.reflection = pComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDMMessage::kCdmRootFieldNumber;
#endif  // !_MSC_VER

CDMMessage::CDMMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDMMessage::InitAsDefaultInstance() {
  cdm_root_ = const_cast< ::HealthMonitoringMessages::pComponent*>(&::HealthMonitoringMessages::pComponent::default_instance());
}

CDMMessage::CDMMessage(const CDMMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDMMessage::SharedCtor() {
  _cached_size_ = 0;
  cdm_root_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDMMessage::~CDMMessage() {
  SharedDtor();
}

void CDMMessage::SharedDtor() {
  if (this != default_instance_) {
    delete cdm_root_;
  }
}

void CDMMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDMMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDMMessage_descriptor_;
}

const CDMMessage& CDMMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HealthMonitoringMessages_2eproto();  return *default_instance_;
}

CDMMessage* CDMMessage::default_instance_ = NULL;

CDMMessage* CDMMessage::New() const {
  return new CDMMessage;
}

void CDMMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cdm_root()) {
      if (cdm_root_ != NULL) cdm_root_->::HealthMonitoringMessages::pComponent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDMMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HealthMonitoringMessages.pComponent cdm_root = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdm_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDMMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HealthMonitoringMessages.pComponent cdm_root = 1;
  if (has_cdm_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cdm_root(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDMMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HealthMonitoringMessages.pComponent cdm_root = 1;
  if (has_cdm_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cdm_root(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDMMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HealthMonitoringMessages.pComponent cdm_root = 1;
    if (has_cdm_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdm_root());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDMMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDMMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDMMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDMMessage::MergeFrom(const CDMMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdm_root()) {
      mutable_cdm_root()->::HealthMonitoringMessages::pComponent::MergeFrom(from.cdm_root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDMMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDMMessage::CopyFrom(const CDMMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDMMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cdm_root()) {
    if (!this->cdm_root().IsInitialized()) return false;
  }
  return true;
}

void CDMMessage::Swap(CDMMessage* other) {
  if (other != this) {
    std::swap(cdm_root_, other->cdm_root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDMMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDMMessage_descriptor_;
  metadata.reflection = CDMMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutputMessage::kComponentFieldNumber;
#endif  // !_MSC_VER

OutputMessage::OutputMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutputMessage::InitAsDefaultInstance() {
  component_ = const_cast< ::HealthMonitoringMessages::pComponent*>(&::HealthMonitoringMessages::pComponent::default_instance());
}

OutputMessage::OutputMessage(const OutputMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutputMessage::SharedCtor() {
  _cached_size_ = 0;
  component_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputMessage::~OutputMessage() {
  SharedDtor();
}

void OutputMessage::SharedDtor() {
  if (this != default_instance_) {
    delete component_;
  }
}

void OutputMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputMessage_descriptor_;
}

const OutputMessage& OutputMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HealthMonitoringMessages_2eproto();  return *default_instance_;
}

OutputMessage* OutputMessage::default_instance_ = NULL;

OutputMessage* OutputMessage::New() const {
  return new OutputMessage;
}

void OutputMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_component()) {
      if (component_ != NULL) component_->::HealthMonitoringMessages::pComponent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HealthMonitoringMessages.pComponent component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_component()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutputMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HealthMonitoringMessages.pComponent component = 1;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->component(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutputMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HealthMonitoringMessages.pComponent component = 1;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->component(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutputMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HealthMonitoringMessages.pComponent component = 1;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->component());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputMessage::MergeFrom(const OutputMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component()) {
      mutable_component()->::HealthMonitoringMessages::pComponent::MergeFrom(from.component());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputMessage::CopyFrom(const OutputMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_component()) {
    if (!this->component().IsInitialized()) return false;
  }
  return true;
}

void OutputMessage::Swap(OutputMessage* other) {
  if (other != this) {
    std::swap(component_, other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputMessage_descriptor_;
  metadata.reflection = OutputMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocationMessage::kXFieldNumber;
const int LocationMessage::kYFieldNumber;
const int LocationMessage::kZFieldNumber;
const int LocationMessage::kSecondsFieldNumber;
const int LocationMessage::kDeltaFieldNumber;
#endif  // !_MSC_VER

LocationMessage::LocationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocationMessage::InitAsDefaultInstance() {
}

LocationMessage::LocationMessage(const LocationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocationMessage::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  seconds_ = 0;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationMessage::~LocationMessage() {
  SharedDtor();
}

void LocationMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationMessage_descriptor_;
}

const LocationMessage& LocationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HealthMonitoringMessages_2eproto();  return *default_instance_;
}

LocationMessage* LocationMessage::default_instance_ = NULL;

LocationMessage* LocationMessage::New() const {
  return new LocationMessage;
}

void LocationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    seconds_ = 0;
    delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds;
        break;
      }
      
      // required int32 seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_delta;
        break;
      }
      
      // required double delta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  // required int32 seconds = 4;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seconds(), output);
  }
  
  // required double delta = 5;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  // required int32 seconds = 4;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seconds(), target);
  }
  
  // required double delta = 5;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocationMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // required int32 seconds = 4;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }
    
    // required double delta = 5;
    if (has_delta()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationMessage::MergeFrom(const LocationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationMessage::CopyFrom(const LocationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void LocationMessage::Swap(LocationMessage* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(seconds_, other->seconds_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationMessage_descriptor_;
  metadata.reflection = LocationMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataUpdateMsg::kOpcodeFieldNumber;
const int DataUpdateMsg::kComponentsFieldNumber;
const int DataUpdateMsg::kLocationFieldNumber;
const int DataUpdateMsg::kResultFieldNumber;
#endif  // !_MSC_VER

DataUpdateMsg::DataUpdateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataUpdateMsg::InitAsDefaultInstance() {
  components_ = const_cast< ::HealthMonitoringMessages::CDMMessage*>(&::HealthMonitoringMessages::CDMMessage::default_instance());
  location_ = const_cast< ::HealthMonitoringMessages::LocationMessage*>(&::HealthMonitoringMessages::LocationMessage::default_instance());
  result_ = const_cast< ::HealthMonitoringMessages::OutputMessage*>(&::HealthMonitoringMessages::OutputMessage::default_instance());
}

DataUpdateMsg::DataUpdateMsg(const DataUpdateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataUpdateMsg::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  components_ = NULL;
  location_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataUpdateMsg::~DataUpdateMsg() {
  SharedDtor();
}

void DataUpdateMsg::SharedDtor() {
  if (this != default_instance_) {
    delete components_;
    delete location_;
    delete result_;
  }
}

void DataUpdateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataUpdateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataUpdateMsg_descriptor_;
}

const DataUpdateMsg& DataUpdateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HealthMonitoringMessages_2eproto();  return *default_instance_;
}

DataUpdateMsg* DataUpdateMsg::default_instance_ = NULL;

DataUpdateMsg* DataUpdateMsg::New() const {
  return new DataUpdateMsg;
}

void DataUpdateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_components()) {
      if (components_ != NULL) components_->::HealthMonitoringMessages::CDMMessage::Clear();
    }
    if (has_location()) {
      if (location_ != NULL) location_->::HealthMonitoringMessages::LocationMessage::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::HealthMonitoringMessages::OutputMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataUpdateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HealthMonitoringMessages.OpCode opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (HealthMonitoringMessages::OpCode_IsValid(value)) {
            set_opcode(static_cast< HealthMonitoringMessages::OpCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_components;
        break;
      }
      
      // optional .HealthMonitoringMessages.CDMMessage components = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }
      
      // optional .HealthMonitoringMessages.LocationMessage location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }
      
      // optional .HealthMonitoringMessages.OutputMessage result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataUpdateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HealthMonitoringMessages.OpCode opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opcode(), output);
  }
  
  // optional .HealthMonitoringMessages.CDMMessage components = 2;
  if (has_components()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->components(), output);
  }
  
  // optional .HealthMonitoringMessages.LocationMessage location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->location(), output);
  }
  
  // optional .HealthMonitoringMessages.OutputMessage result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataUpdateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HealthMonitoringMessages.OpCode opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opcode(), target);
  }
  
  // optional .HealthMonitoringMessages.CDMMessage components = 2;
  if (has_components()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->components(), target);
  }
  
  // optional .HealthMonitoringMessages.LocationMessage location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->location(), target);
  }
  
  // optional .HealthMonitoringMessages.OutputMessage result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataUpdateMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HealthMonitoringMessages.OpCode opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }
    
    // optional .HealthMonitoringMessages.CDMMessage components = 2;
    if (has_components()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->components());
    }
    
    // optional .HealthMonitoringMessages.LocationMessage location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional .HealthMonitoringMessages.OutputMessage result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataUpdateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataUpdateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataUpdateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataUpdateMsg::MergeFrom(const DataUpdateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_components()) {
      mutable_components()->::HealthMonitoringMessages::CDMMessage::MergeFrom(from.components());
    }
    if (from.has_location()) {
      mutable_location()->::HealthMonitoringMessages::LocationMessage::MergeFrom(from.location());
    }
    if (from.has_result()) {
      mutable_result()->::HealthMonitoringMessages::OutputMessage::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataUpdateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataUpdateMsg::CopyFrom(const DataUpdateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataUpdateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_components()) {
    if (!this->components().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DataUpdateMsg::Swap(DataUpdateMsg* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(components_, other->components_);
    std::swap(location_, other->location_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataUpdateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataUpdateMsg_descriptor_;
  metadata.reflection = DataUpdateMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HealthMonitoringMessages

// @@protoc_insertion_point(global_scope)
