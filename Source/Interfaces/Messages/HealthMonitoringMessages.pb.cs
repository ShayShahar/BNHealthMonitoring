// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace HealthMonitoringMessages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class HealthMonitoringMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_HealthMonitoringMessages_pLink__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.pLink, global::HealthMonitoringMessages.pLink.Builder> internal__static_HealthMonitoringMessages_pLink__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HealthMonitoringMessages_pComponent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.pComponent, global::HealthMonitoringMessages.pComponent.Builder> internal__static_HealthMonitoringMessages_pComponent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HealthMonitoringMessages_CDMMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.CDMMessage, global::HealthMonitoringMessages.CDMMessage.Builder> internal__static_HealthMonitoringMessages_CDMMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HealthMonitoringMessages_LocationMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.LocationMessage, global::HealthMonitoringMessages.LocationMessage.Builder> internal__static_HealthMonitoringMessages_LocationMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HealthMonitoringMessages_DataUpdateMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.DataUpdateMsg, global::HealthMonitoringMessages.DataUpdateMsg.Builder> internal__static_HealthMonitoringMessages_DataUpdateMsg__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static HealthMonitoringMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5IZWFsdGhNb25pdG9yaW5nTWVzc2FnZXMucHJvdG8SGEhlYWx0aE1vbml0", 
            "b3JpbmdNZXNzYWdlcyJjCgVwTGluaxI2CghjaGlsZHJlbhgBIAEoCzIkLkhl", 
            "YWx0aE1vbml0b3JpbmdNZXNzYWdlcy5wQ29tcG9uZW50EhMKC3Byb2JhYmls", 
            "aXR5GAIgASgBEg0KBXN0YXRlGAMgASgJIlkKCnBDb21wb25lbnQSLgoFbGlu", 
            "a3MYASADKAsyHy5IZWFsdGhNb25pdG9yaW5nTWVzc2FnZXMucExpbmsSDAoE", 
            "bmFtZRgCIAIoCRINCgVzdGF0ZRgDIAEoCSJECgpDRE1NZXNzYWdlEjYKCGNk", 
            "bV9yb290GAEgAigLMiQuSGVhbHRoTW9uaXRvcmluZ01lc3NhZ2VzLnBDb21w", 
            "b25lbnQiQwoPTG9jYXRpb25NZXNzYWdlEgkKAXgYASACKAESCQoBeRgCIAIo", 
            "ARIJCgF6GAMgAigBEg8KB3NlY29uZHMYBCACKAUiuAEKDURhdGFVcGRhdGVN", 
            "c2cSMAoGb3Bjb2RlGAEgAigOMiAuSGVhbHRoTW9uaXRvcmluZ01lc3NhZ2Vz", 
            "Lk9wQ29kZRI4Cgpjb21wb25lbnRzGAIgASgLMiQuSGVhbHRoTW9uaXRvcmlu", 
            "Z01lc3NhZ2VzLkNETU1lc3NhZ2USOwoIbG9jYXRpb24YAyABKAsyKS5IZWFs", 
            "dGhNb25pdG9yaW5nTWVzc2FnZXMuTG9jYXRpb25NZXNzYWdlKikKBk9wQ29k", 
          "ZRIOCgpDb21wb25lbnRzEAASDwoLU2F0TG9jYXRpb24QAQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_HealthMonitoringMessages_pLink__Descriptor = Descriptor.MessageTypes[0];
        internal__static_HealthMonitoringMessages_pLink__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.pLink, global::HealthMonitoringMessages.pLink.Builder>(internal__static_HealthMonitoringMessages_pLink__Descriptor,
                new string[] { "Children", "Probability", "State", });
        internal__static_HealthMonitoringMessages_pComponent__Descriptor = Descriptor.MessageTypes[1];
        internal__static_HealthMonitoringMessages_pComponent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.pComponent, global::HealthMonitoringMessages.pComponent.Builder>(internal__static_HealthMonitoringMessages_pComponent__Descriptor,
                new string[] { "Links", "Name", "State", });
        internal__static_HealthMonitoringMessages_CDMMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_HealthMonitoringMessages_CDMMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.CDMMessage, global::HealthMonitoringMessages.CDMMessage.Builder>(internal__static_HealthMonitoringMessages_CDMMessage__Descriptor,
                new string[] { "CdmRoot", });
        internal__static_HealthMonitoringMessages_LocationMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_HealthMonitoringMessages_LocationMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.LocationMessage, global::HealthMonitoringMessages.LocationMessage.Builder>(internal__static_HealthMonitoringMessages_LocationMessage__Descriptor,
                new string[] { "X", "Y", "Z", "Seconds", });
        internal__static_HealthMonitoringMessages_DataUpdateMsg__Descriptor = Descriptor.MessageTypes[4];
        internal__static_HealthMonitoringMessages_DataUpdateMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HealthMonitoringMessages.DataUpdateMsg, global::HealthMonitoringMessages.DataUpdateMsg.Builder>(internal__static_HealthMonitoringMessages_DataUpdateMsg__Descriptor,
                new string[] { "Opcode", "Components", "Location", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum OpCode {
    Components = 0,
    SatLocation = 1,
  }
  
  #endregion
  
  #region Messages
  [global::System.SerializableAttribute()]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class pLink : pb::GeneratedMessage<pLink, pLink.Builder> {
    private pLink() { }
    private static readonly pLink defaultInstance = new pLink().MakeReadOnly();
    private static readonly string[] _pLinkFieldNames = new string[] { "children", "probability", "state" };
    private static readonly uint[] _pLinkFieldTags = new uint[] { 10, 17, 26 };
    public static pLink DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override pLink DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override pLink ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_pLink__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<pLink, pLink.Builder> InternalFieldAccessors {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_pLink__FieldAccessorTable; }
    }
    
    public const int ChildrenFieldNumber = 1;
    private bool hasChildren;
    private global::HealthMonitoringMessages.pComponent children_;
    public bool HasChildren {
      get { return hasChildren; }
    }
    public global::HealthMonitoringMessages.pComponent Children {
      get { return children_ ?? global::HealthMonitoringMessages.pComponent.DefaultInstance; }
    }
    
    public const int ProbabilityFieldNumber = 2;
    private bool hasProbability;
    private double probability_;
    public bool HasProbability {
      get { return hasProbability; }
    }
    public double Probability {
      get { return probability_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private string state_ = "";
    public bool HasState {
      get { return hasState; }
    }
    public string State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasChildren) {
          if (!Children.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pLinkFieldNames;
      if (hasChildren) {
        output.WriteMessage(1, field_names[0], Children);
      }
      if (hasProbability) {
        output.WriteDouble(2, field_names[1], Probability);
      }
      if (hasState) {
        output.WriteString(3, field_names[2], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChildren) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Children);
      }
      if (hasProbability) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Probability);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeStringSize(3, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static pLink ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static pLink ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static pLink ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static pLink ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static pLink ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static pLink ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static pLink ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static pLink ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static pLink ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static pLink ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private pLink MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(pLink prototype) {
      return new Builder(prototype);
    }
    
    [global::System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<pLink, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(pLink cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private pLink result;
      
      private pLink PrepareBuilder() {
        if (resultIsReadOnly) {
          pLink original = result;
          result = new pLink();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override pLink MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HealthMonitoringMessages.pLink.Descriptor; }
      }
      
      public override pLink DefaultInstanceForType {
        get { return global::HealthMonitoringMessages.pLink.DefaultInstance; }
      }
      
      public override pLink BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is pLink) {
          return MergeFrom((pLink) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(pLink other) {
        if (other == global::HealthMonitoringMessages.pLink.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChildren) {
          MergeChildren(other.Children);
        }
        if (other.HasProbability) {
          Probability = other.Probability;
        }
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pLinkFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pLinkFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::HealthMonitoringMessages.pComponent.Builder subBuilder = global::HealthMonitoringMessages.pComponent.CreateBuilder();
              if (result.hasChildren) {
                subBuilder.MergeFrom(Children);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Children = subBuilder.BuildPartial();
              break;
            }
            case 17: {
              result.hasProbability = input.ReadDouble(ref result.probability_);
              break;
            }
            case 26: {
              result.hasState = input.ReadString(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChildren {
       get { return result.hasChildren; }
      }
      public global::HealthMonitoringMessages.pComponent Children {
        get { return result.Children; }
        set { SetChildren(value); }
      }
      public Builder SetChildren(global::HealthMonitoringMessages.pComponent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChildren = true;
        result.children_ = value;
        return this;
      }
      public Builder SetChildren(global::HealthMonitoringMessages.pComponent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChildren = true;
        result.children_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChildren(global::HealthMonitoringMessages.pComponent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChildren &&
            result.children_ != global::HealthMonitoringMessages.pComponent.DefaultInstance) {
            result.children_ = global::HealthMonitoringMessages.pComponent.CreateBuilder(result.children_).MergeFrom(value).BuildPartial();
        } else {
          result.children_ = value;
        }
        result.hasChildren = true;
        return this;
      }
      public Builder ClearChildren() {
        PrepareBuilder();
        result.hasChildren = false;
        result.children_ = null;
        return this;
      }
      
      public bool HasProbability {
        get { return result.hasProbability; }
      }
      public double Probability {
        get { return result.Probability; }
        set { SetProbability(value); }
      }
      public Builder SetProbability(double value) {
        PrepareBuilder();
        result.hasProbability = true;
        result.probability_ = value;
        return this;
      }
      public Builder ClearProbability() {
        PrepareBuilder();
        result.hasProbability = false;
        result.probability_ = 0D;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public string State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = "";
        return this;
      }
    }
    static pLink() {
      object.ReferenceEquals(global::HealthMonitoringMessages.HealthMonitoringMessages.Descriptor, null);
    }
  }
  
  [global::System.SerializableAttribute()]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class pComponent : pb::GeneratedMessage<pComponent, pComponent.Builder> {
    private pComponent() { }
    private static readonly pComponent defaultInstance = new pComponent().MakeReadOnly();
    private static readonly string[] _pComponentFieldNames = new string[] { "links", "name", "state" };
    private static readonly uint[] _pComponentFieldTags = new uint[] { 10, 18, 26 };
    public static pComponent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override pComponent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override pComponent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_pComponent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<pComponent, pComponent.Builder> InternalFieldAccessors {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_pComponent__FieldAccessorTable; }
    }
    
    public const int LinksFieldNumber = 1;
    private pbc::PopsicleList<global::HealthMonitoringMessages.pLink> links_ = new pbc::PopsicleList<global::HealthMonitoringMessages.pLink>();
    public scg::IList<global::HealthMonitoringMessages.pLink> LinksList {
      get { return links_; }
    }
    public int LinksCount {
      get { return links_.Count; }
    }
    public global::HealthMonitoringMessages.pLink GetLinks(int index) {
      return links_[index];
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private string state_ = "";
    public bool HasState {
      get { return hasState; }
    }
    public string State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        foreach (global::HealthMonitoringMessages.pLink element in LinksList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pComponentFieldNames;
      if (links_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], links_);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      if (hasState) {
        output.WriteString(3, field_names[2], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::HealthMonitoringMessages.pLink element in LinksList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeStringSize(3, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static pComponent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static pComponent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static pComponent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static pComponent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static pComponent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static pComponent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static pComponent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static pComponent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static pComponent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static pComponent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private pComponent MakeReadOnly() {
      links_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(pComponent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<pComponent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(pComponent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private pComponent result;
      
      private pComponent PrepareBuilder() {
        if (resultIsReadOnly) {
          pComponent original = result;
          result = new pComponent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override pComponent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HealthMonitoringMessages.pComponent.Descriptor; }
      }
      
      public override pComponent DefaultInstanceForType {
        get { return global::HealthMonitoringMessages.pComponent.DefaultInstance; }
      }
      
      public override pComponent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is pComponent) {
          return MergeFrom((pComponent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(pComponent other) {
        if (other == global::HealthMonitoringMessages.pComponent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.links_.Count != 0) {
          result.links_.Add(other.links_);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pComponentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pComponentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.links_, global::HealthMonitoringMessages.pLink.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasState = input.ReadString(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::HealthMonitoringMessages.pLink> LinksList {
        get { return PrepareBuilder().links_; }
      }
      public int LinksCount {
        get { return result.LinksCount; }
      }
      public global::HealthMonitoringMessages.pLink GetLinks(int index) {
        return result.GetLinks(index);
      }
      public Builder SetLinks(int index, global::HealthMonitoringMessages.pLink value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.links_[index] = value;
        return this;
      }
      public Builder SetLinks(int index, global::HealthMonitoringMessages.pLink.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.links_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLinks(global::HealthMonitoringMessages.pLink value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.links_.Add(value);
        return this;
      }
      public Builder AddLinks(global::HealthMonitoringMessages.pLink.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.links_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLinks(scg::IEnumerable<global::HealthMonitoringMessages.pLink> values) {
        PrepareBuilder();
        result.links_.Add(values);
        return this;
      }
      public Builder ClearLinks() {
        PrepareBuilder();
        result.links_.Clear();
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public string State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = "";
        return this;
      }
    }
    static pComponent() {
      object.ReferenceEquals(global::HealthMonitoringMessages.HealthMonitoringMessages.Descriptor, null);
    }
  }
  
  [global::System.SerializableAttribute()]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CDMMessage : pb::GeneratedMessage<CDMMessage, CDMMessage.Builder> {
    private CDMMessage() { }
    private static readonly CDMMessage defaultInstance = new CDMMessage().MakeReadOnly();
    private static readonly string[] _cDMMessageFieldNames = new string[] { "cdm_root" };
    private static readonly uint[] _cDMMessageFieldTags = new uint[] { 10 };
    public static CDMMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CDMMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CDMMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_CDMMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CDMMessage, CDMMessage.Builder> InternalFieldAccessors {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_CDMMessage__FieldAccessorTable; }
    }
    
    public const int CdmRootFieldNumber = 1;
    private bool hasCdmRoot;
    private global::HealthMonitoringMessages.pComponent cdmRoot_;
    public bool HasCdmRoot {
      get { return hasCdmRoot; }
    }
    public global::HealthMonitoringMessages.pComponent CdmRoot {
      get { return cdmRoot_ ?? global::HealthMonitoringMessages.pComponent.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCdmRoot) return false;
        if (!CdmRoot.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cDMMessageFieldNames;
      if (hasCdmRoot) {
        output.WriteMessage(1, field_names[0], CdmRoot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCdmRoot) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, CdmRoot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CDMMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CDMMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CDMMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CDMMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CDMMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CDMMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CDMMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CDMMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CDMMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CDMMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CDMMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CDMMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CDMMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CDMMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CDMMessage result;
      
      private CDMMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          CDMMessage original = result;
          result = new CDMMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CDMMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HealthMonitoringMessages.CDMMessage.Descriptor; }
      }
      
      public override CDMMessage DefaultInstanceForType {
        get { return global::HealthMonitoringMessages.CDMMessage.DefaultInstance; }
      }
      
      public override CDMMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CDMMessage) {
          return MergeFrom((CDMMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CDMMessage other) {
        if (other == global::HealthMonitoringMessages.CDMMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCdmRoot) {
          MergeCdmRoot(other.CdmRoot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cDMMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cDMMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::HealthMonitoringMessages.pComponent.Builder subBuilder = global::HealthMonitoringMessages.pComponent.CreateBuilder();
              if (result.hasCdmRoot) {
                subBuilder.MergeFrom(CdmRoot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CdmRoot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCdmRoot {
       get { return result.hasCdmRoot; }
      }
      public global::HealthMonitoringMessages.pComponent CdmRoot {
        get { return result.CdmRoot; }
        set { SetCdmRoot(value); }
      }
      public Builder SetCdmRoot(global::HealthMonitoringMessages.pComponent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCdmRoot = true;
        result.cdmRoot_ = value;
        return this;
      }
      public Builder SetCdmRoot(global::HealthMonitoringMessages.pComponent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCdmRoot = true;
        result.cdmRoot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCdmRoot(global::HealthMonitoringMessages.pComponent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCdmRoot &&
            result.cdmRoot_ != global::HealthMonitoringMessages.pComponent.DefaultInstance) {
            result.cdmRoot_ = global::HealthMonitoringMessages.pComponent.CreateBuilder(result.cdmRoot_).MergeFrom(value).BuildPartial();
        } else {
          result.cdmRoot_ = value;
        }
        result.hasCdmRoot = true;
        return this;
      }
      public Builder ClearCdmRoot() {
        PrepareBuilder();
        result.hasCdmRoot = false;
        result.cdmRoot_ = null;
        return this;
      }
    }
    static CDMMessage() {
      object.ReferenceEquals(global::HealthMonitoringMessages.HealthMonitoringMessages.Descriptor, null);
    }
  }
  
  [global::System.SerializableAttribute()]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LocationMessage : pb::GeneratedMessage<LocationMessage, LocationMessage.Builder> {
    private LocationMessage() { }
    private static readonly LocationMessage defaultInstance = new LocationMessage().MakeReadOnly();
    private static readonly string[] _locationMessageFieldNames = new string[] { "seconds", "x", "y", "z" };
    private static readonly uint[] _locationMessageFieldTags = new uint[] { 32, 9, 17, 25 };
    public static LocationMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LocationMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LocationMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_LocationMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LocationMessage, LocationMessage.Builder> InternalFieldAccessors {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_LocationMessage__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private double x_;
    public bool HasX {
      get { return hasX; }
    }
    public double X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private double y_;
    public bool HasY {
      get { return hasY; }
    }
    public double Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private double z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public double Z {
      get { return z_; }
    }
    
    public const int SecondsFieldNumber = 4;
    private bool hasSeconds;
    private int seconds_;
    public bool HasSeconds {
      get { return hasSeconds; }
    }
    public int Seconds {
      get { return seconds_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        if (!hasSeconds) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _locationMessageFieldNames;
      if (hasX) {
        output.WriteDouble(1, field_names[1], X);
      }
      if (hasY) {
        output.WriteDouble(2, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteDouble(3, field_names[3], Z);
      }
      if (hasSeconds) {
        output.WriteInt32(4, field_names[0], Seconds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Z);
      }
      if (hasSeconds) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Seconds);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LocationMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LocationMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LocationMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LocationMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LocationMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LocationMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LocationMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LocationMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LocationMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LocationMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LocationMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LocationMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LocationMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LocationMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LocationMessage result;
      
      private LocationMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          LocationMessage original = result;
          result = new LocationMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LocationMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HealthMonitoringMessages.LocationMessage.Descriptor; }
      }
      
      public override LocationMessage DefaultInstanceForType {
        get { return global::HealthMonitoringMessages.LocationMessage.DefaultInstance; }
      }
      
      public override LocationMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LocationMessage) {
          return MergeFrom((LocationMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LocationMessage other) {
        if (other == global::HealthMonitoringMessages.LocationMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.HasSeconds) {
          Seconds = other.Seconds;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_locationMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _locationMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasX = input.ReadDouble(ref result.x_);
              break;
            }
            case 17: {
              result.hasY = input.ReadDouble(ref result.y_);
              break;
            }
            case 25: {
              result.hasZ = input.ReadDouble(ref result.z_);
              break;
            }
            case 32: {
              result.hasSeconds = input.ReadInt32(ref result.seconds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public double X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(double value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0D;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public double Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(double value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0D;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public double Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(double value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0D;
        return this;
      }
      
      public bool HasSeconds {
        get { return result.hasSeconds; }
      }
      public int Seconds {
        get { return result.Seconds; }
        set { SetSeconds(value); }
      }
      public Builder SetSeconds(int value) {
        PrepareBuilder();
        result.hasSeconds = true;
        result.seconds_ = value;
        return this;
      }
      public Builder ClearSeconds() {
        PrepareBuilder();
        result.hasSeconds = false;
        result.seconds_ = 0;
        return this;
      }
    }
    static LocationMessage() {
      object.ReferenceEquals(global::HealthMonitoringMessages.HealthMonitoringMessages.Descriptor, null);
    }
  }
  
  [global::System.SerializableAttribute()]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataUpdateMsg : pb::GeneratedMessage<DataUpdateMsg, DataUpdateMsg.Builder> {
    private DataUpdateMsg() { }
    private static readonly DataUpdateMsg defaultInstance = new DataUpdateMsg().MakeReadOnly();
    private static readonly string[] _dataUpdateMsgFieldNames = new string[] { "components", "location", "opcode" };
    private static readonly uint[] _dataUpdateMsgFieldTags = new uint[] { 18, 26, 8 };
    public static DataUpdateMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataUpdateMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataUpdateMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_DataUpdateMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataUpdateMsg, DataUpdateMsg.Builder> InternalFieldAccessors {
      get { return global::HealthMonitoringMessages.HealthMonitoringMessages.internal__static_HealthMonitoringMessages_DataUpdateMsg__FieldAccessorTable; }
    }
    
    public const int OpcodeFieldNumber = 1;
    private bool hasOpcode;
    private global::HealthMonitoringMessages.OpCode opcode_ = global::HealthMonitoringMessages.OpCode.Components;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    public global::HealthMonitoringMessages.OpCode Opcode {
      get { return opcode_; }
    }
    
    public const int ComponentsFieldNumber = 2;
    private bool hasComponents;
    private global::HealthMonitoringMessages.CDMMessage components_;
    public bool HasComponents {
      get { return hasComponents; }
    }
    public global::HealthMonitoringMessages.CDMMessage Components {
      get { return components_ ?? global::HealthMonitoringMessages.CDMMessage.DefaultInstance; }
    }
    
    public const int LocationFieldNumber = 3;
    private bool hasLocation;
    private global::HealthMonitoringMessages.LocationMessage location_;
    public bool HasLocation {
      get { return hasLocation; }
    }
    public global::HealthMonitoringMessages.LocationMessage Location {
      get { return location_ ?? global::HealthMonitoringMessages.LocationMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpcode) return false;
        if (HasComponents) {
          if (!Components.IsInitialized) return false;
        }
        if (HasLocation) {
          if (!Location.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _dataUpdateMsgFieldNames;
      if (hasOpcode) {
        output.WriteEnum(1, field_names[2], (int) Opcode, Opcode);
      }
      if (hasComponents) {
        output.WriteMessage(2, field_names[0], Components);
      }
      if (hasLocation) {
        output.WriteMessage(3, field_names[1], Location);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpcode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Opcode);
      }
      if (hasComponents) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Components);
      }
      if (hasLocation) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Location);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static DataUpdateMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataUpdateMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataUpdateMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataUpdateMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataUpdateMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataUpdateMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataUpdateMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataUpdateMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataUpdateMsg result;
      
      private DataUpdateMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          DataUpdateMsg original = result;
          result = new DataUpdateMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataUpdateMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HealthMonitoringMessages.DataUpdateMsg.Descriptor; }
      }
      
      public override DataUpdateMsg DefaultInstanceForType {
        get { return global::HealthMonitoringMessages.DataUpdateMsg.DefaultInstance; }
      }
      
      public override DataUpdateMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataUpdateMsg) {
          return MergeFrom((DataUpdateMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataUpdateMsg other) {
        if (other == global::HealthMonitoringMessages.DataUpdateMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        if (other.HasComponents) {
          MergeComponents(other.Components);
        }
        if (other.HasLocation) {
          MergeLocation(other.Location);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataUpdateMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataUpdateMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.opcode_, out unknown)) {
                result.hasOpcode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::HealthMonitoringMessages.CDMMessage.Builder subBuilder = global::HealthMonitoringMessages.CDMMessage.CreateBuilder();
              if (result.hasComponents) {
                subBuilder.MergeFrom(Components);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Components = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::HealthMonitoringMessages.LocationMessage.Builder subBuilder = global::HealthMonitoringMessages.LocationMessage.CreateBuilder();
              if (result.hasLocation) {
                subBuilder.MergeFrom(Location);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Location = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpcode {
       get { return result.hasOpcode; }
      }
      public global::HealthMonitoringMessages.OpCode Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      public Builder SetOpcode(global::HealthMonitoringMessages.OpCode value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = global::HealthMonitoringMessages.OpCode.Components;
        return this;
      }
      
      public bool HasComponents {
       get { return result.hasComponents; }
      }
      public global::HealthMonitoringMessages.CDMMessage Components {
        get { return result.Components; }
        set { SetComponents(value); }
      }
      public Builder SetComponents(global::HealthMonitoringMessages.CDMMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasComponents = true;
        result.components_ = value;
        return this;
      }
      public Builder SetComponents(global::HealthMonitoringMessages.CDMMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasComponents = true;
        result.components_ = builderForValue.Build();
        return this;
      }
      public Builder MergeComponents(global::HealthMonitoringMessages.CDMMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasComponents &&
            result.components_ != global::HealthMonitoringMessages.CDMMessage.DefaultInstance) {
            result.components_ = global::HealthMonitoringMessages.CDMMessage.CreateBuilder(result.components_).MergeFrom(value).BuildPartial();
        } else {
          result.components_ = value;
        }
        result.hasComponents = true;
        return this;
      }
      public Builder ClearComponents() {
        PrepareBuilder();
        result.hasComponents = false;
        result.components_ = null;
        return this;
      }
      
      public bool HasLocation {
       get { return result.hasLocation; }
      }
      public global::HealthMonitoringMessages.LocationMessage Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(global::HealthMonitoringMessages.LocationMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder SetLocation(global::HealthMonitoringMessages.LocationMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocation(global::HealthMonitoringMessages.LocationMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocation &&
            result.location_ != global::HealthMonitoringMessages.LocationMessage.DefaultInstance) {
            result.location_ = global::HealthMonitoringMessages.LocationMessage.CreateBuilder(result.location_).MergeFrom(value).BuildPartial();
        } else {
          result.location_ = value;
        }
        result.hasLocation = true;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = null;
        return this;
      }
    }
    static DataUpdateMsg() {
      object.ReferenceEquals(global::HealthMonitoringMessages.HealthMonitoringMessages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
